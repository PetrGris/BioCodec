import React, { useState } from 'react';
import { Box, Typography, TextField, Button, Stack, Chip, Paper, Divider, Checkbox, MenuItem, Select } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import ELEMENTS_LIBRARY_ORIGINAL from '../data/elementsLibrary';

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏
const EMOJI_SET = [
  'üßò‚Äç‚ôÇÔ∏è', 'üìµ', 'üíä', 'ü•ó', '‚è∞', 'üå¨Ô∏è', 'üìù', 'üèÉ‚Äç‚ôÇÔ∏è', 'üåû', 'üß†', 'üìö', 'üö∂‚Äç‚ôÇÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è',
  'üò¥', '‚òÄÔ∏è', 'ü•¶', 'üö´', 'üç¨', 'üç∑', 'üíß', 'ü§∏', 'üöø', 'üç≥', 'ü•ó', 'üö∂', 'üß¨', 'üßò', 'üßë‚Äçüî¨', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'ü´Ä', 'ü´Å', 'üß¨', 'üß™', 'ü©∫', 'üè•', 'üèãÔ∏è', 'üèä', 'üö¥', 'ü§∏‚Äç‚ôÇÔ∏è', 'üßó', '‚õπÔ∏è', 'ü§æ', 'üèÑ', 'üßñ', 'üõå', 'üõÄ', 'üß¥', 'ü¶∑', 'ü¶¥', 'üßÇ', 'ü•õ', 'üçé', 'üçã', 'üçå', 'üçá', 'üçâ', 'üçí', 'üçë', 'üçç', 'ü•ë', 'ü•í', 'ü•ï', 'üåΩ', 'üçÖ', 'ü•î', 'üç†', 'ü•ú', 'üå∞', 'üçû', 'ü•®', 'ü•Ø', 'ü•ê', 'üçó', 'ü•©', 'üçñ', 'üç§', 'üç£', 'üç±', 'üç≤', 'ü•£', 'ü•ó', 'üçø', 'üç´', 'üç¨', 'üç≠', 'üçÆ', 'üçØ', 'üçº', 'ü•§', '‚òï', 'üçµ', 'ü•õ', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üçæ', 'ü•Ñ', 'üç¥', 'üçΩÔ∏è', 'ü•¢', 'üßÇ'
];

export default function CreateProtocolPage() {
  const [title, setTitle] = useState('');
  const [goal, setGoal] = useState('');
  const [selected, setSelected] = useState([]);
  const [elementsLibrary, setElementsLibrary] = useState(() => JSON.parse(JSON.stringify(ELEMENTS_LIBRARY_ORIGINAL)));

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const [custom, setCustom] = useState({
    icon: '',
    title: '',
    description: '',
    category: Object.keys(elementsLibrary)[0] || '',
    sources: '',
    type: '',
    recommendations: '',
    risks: '',
  });

  const navigate = useNavigate();

  const handleToggle = (id) => {
    setSelected((prev) => prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]);
  };

  const handleSave = () => {
    alert('–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–∑–¥–∞–Ω! (–¥–µ–º–æ)');
    navigate('/dashboard');
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleAddCustom = () => {
    if (!custom.title || !custom.icon || !custom.category) return;
    const newId = 'custom_' + Date.now();
    const newEl = {
      id: newId,
      icon: custom.icon,
      title: custom.title,
      description: custom.description,
      sources: custom.sources ? custom.sources.split(',').map(s => s.trim()) : [],
      type: custom.type,
      recommendations: custom.recommendations,
      risks: custom.risks,
    };
    setElementsLibrary(prev => ({
      ...prev,
      [custom.category]: [...(prev[custom.category] || []), newEl],
    }));
    setSelected(prev => [...prev, newId]);
    setCustom({ ...custom, icon: '', title: '', description: '', sources: '', type: '', recommendations: '', risks: '' });
  };

  return (
    <Box>
      <Typography variant="h4" sx={{ mb: 2, fontWeight: 700 }}>–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</Typography>
      <Stack spacing={2} sx={{ maxWidth: 600 }}>
        <TextField label="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞" value={title} onChange={e => setTitle(e.target.value)} fullWidth />
        <TextField label="–¶–µ–ª—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞" value={goal} onChange={e => setGoal(e.target.value)} fullWidth />
        <Divider sx={{ my: 2 }} />
        <Typography variant="h6" sx={{ mb: 1 }}>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:</Typography>
        {Object.entries(elementsLibrary).map(([cat, items]) => (
          <Box key={cat} sx={{ mb: 2 }}>
            <Typography variant="subtitle1" sx={{ fontWeight: 700, mb: 1 }}>{cat}</Typography>
            <Stack spacing={1}>
              {items.map(el => (
                <Paper key={el.id} sx={{ p: 2, display: 'flex', alignItems: 'center', gap: 2 }}>
                  <Checkbox checked={selected.includes(el.id)} onChange={() => handleToggle(el.id)} />
                  <span style={{ fontSize: 28 }}>{el.icon}</span>
                  <Box>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>{el.title}</Typography>
                    <Typography variant="body2" color="text.secondary">{el.description}</Typography>
                    <Stack direction="row" spacing={1} sx={{ mt: 0.5 }}>
                      <Chip label={el.type} size="small" />
                      <Chip label={el.recommendations} size="small" />
                      <Chip label={el.risks} size="small" color="warning" />
                    </Stack>
                    <Typography variant="caption" color="primary">{el.sources.map((s, i) => <a key={i} href={s} target="_blank" rel="noopener noreferrer">[–∏—Å—Ç–æ—á–Ω–∏–∫]</a>)}</Typography>
                  </Box>
                </Paper>
              ))}
            </Stack>
          </Box>
        ))}
        <Divider sx={{ my: 2 }} />
        <Typography variant="h6">–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç</Typography>
        <Box>
          <Typography variant="subtitle2" sx={{ mb: 1 }}>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É:</Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
            {EMOJI_SET.map(emoji => (
              <Button
                key={emoji}
                variant={custom.icon === emoji ? 'contained' : 'outlined'}
                color={custom.icon === emoji ? 'secondary' : 'inherit'}
                sx={{ minWidth: 40, minHeight: 40, fontSize: 24, p: 0.5 }}
                onClick={() => setCustom({ ...custom, icon: emoji })}
              >
                {emoji}
              </Button>
            ))}
          </Box>
        </Box>
        <Select value={custom.category} onChange={e => setCustom({ ...custom, category: e.target.value })} sx={{ minWidth: 160 }}>
          {Object.keys(elementsLibrary).map(cat => <MenuItem key={cat} value={cat}>{cat}</MenuItem>)}
          <MenuItem value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</MenuItem>
        </Select>
        <TextField label="–ù–∞–∑–≤–∞–Ω–∏–µ" value={custom.title} onChange={e => setCustom({ ...custom, title: e.target.value })} fullWidth />
        <TextField label="–û–ø–∏—Å–∞–Ω–∏–µ" value={custom.description} onChange={e => setCustom({ ...custom, description: e.target.value })} fullWidth />
        <TextField label="–°—Å—ã–ª–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" value={custom.sources} onChange={e => setCustom({ ...custom, sources: e.target.value })} fullWidth />
        <TextField label="–¢–∏–ø" value={custom.type} onChange={e => setCustom({ ...custom, type: e.target.value })} fullWidth />
        <TextField label="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" value={custom.recommendations} onChange={e => setCustom({ ...custom, recommendations: e.target.value })} fullWidth />
        <TextField label="–†–∏—Å–∫–∏" value={custom.risks} onChange={e => setCustom({ ...custom, risks: e.target.value })} fullWidth />
        <Button variant="outlined" color="secondary" onClick={handleAddCustom} disabled={!custom.icon || !custom.title || !custom.category}>–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç</Button>
        <Button variant="contained" color="success" onClick={handleSave} disabled={!title || !goal || selected.length === 0}>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª
        </Button>
      </Stack>
    </Box>
  );
} 